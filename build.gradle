plugins {
    id 'java'
    id 'war'
}

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()

    maven {
        url = 'https://www.cadc-ccda.hia-iha.nrc-cnrc.gc.ca/m2repo'
    }

    // To obtain access to the Oracle Maven repository, put your credentials into environment variables:
    // - MAVEN_ORACLE_USERNAME
    // - MAVEN_ORACLE_PASSWORD
    //
    maven {
        name 'maven.oracle.com'
        url 'https://maven.oracle.com'
        credentials {
            username "${System.env.MAVEN_ORACLE_USERNAME}"
            password "${System.env.MAVEN_ORACLE_PASSWORD}"
        }
    }
}

group = 'org.opencadc'
sourceCompatibility = 1.8
version = '1000'

war {
    archiveName = 'tap##' + project.version + '.war'
}

configurations {
    intTestCompile.extendsFrom testImplementation
    intTestRuntime.extendsFrom testRuntimeOnly
}

dependencies {
    implementation 'log4j:log4j:[1.2,2.0)'
    implementation 'org.opencadc:cadc-log:[1.0,)'
    implementation 'org.opencadc:cadc-util:1.7.3'
    implementation 'org.opencadc:cadc-dali:[1.1,)'
    implementation 'org.opencadc:cadc-uws:[1.0,)'
    implementation 'org.opencadc:cadc-uws-server:[1.2,)'
    implementation 'org.opencadc:cadc-tap-server:[1.1.5,)'
    implementation 'org.opencadc:cadc-vosi:[1.0,1.4)'
    implementation 'org.opencadc:cadc-adql:[1.1,)'
    implementation 'org.opencadc:cadc-tap-server-oracle:[1.0.0,)'

    // Switch out this to use any supported database instead of PostgreSQL.
    // ## START CUSTOM DATABASE ##
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.13'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
    // ## END CUSTOM DATABASE ##

    testImplementation 'junit:junit:[4.0,)'
    testImplementation 'xmlunit:xmlunit:[1.0,)'

    implementation 'com.google.cloud:google-cloud-storage:1.48.0'
    implementation 'org.restlet.jee:org.restlet.ext.servlet:2.0.3'
    implementation 'org.opencadc:cadc-tap-server:[1.1.5,)'
    implementation 'org.opencadc:cadc-adql:[1.1.4,)'
    implementation 'org.opencadc:cadc-access-control-identity:[1.0.7,)'
    implementation 'software.amazon.awssdk:s3:2.17.230'
    implementation 'software.amazon.awssdk:auth:2.17.230'
    implementation 'org.apache.solr:solr-s3-repository:8.11.2'

    runtimeOnly 'org.opencadc:cadc-registry:[1.2.1,)'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    // https://mvnrepository.com/artifact/org.antlr/ST4
    implementation 'org.antlr:ST4:4.3.1'

}

sourceSets {
    intTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/intTest/java')
        }

        // set the intTest resource directory
        resources.srcDir file('src/intTest/resources')
    }
}

tasks.withType(Test) {
    // reset the report destinations so that intTests go to their
    // own page
    //reports.html.destination = file("${reporting.baseDir}/${name}")
    reports.html.destination = file(reporting.baseDir.getAbsolutePath() + '/' + name)

    // Assign all Java system properties from
    // the command line to the tests
    systemProperties System.properties as Map<String, ?>
}

task intTest(type: Test) {
    // set the configuration context
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath

    // run the tests always
    outputs.upToDateWhen { false }
}
