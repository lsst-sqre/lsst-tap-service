plugins {
    id 'java'
    id 'war'
    id 'io.sentry.jvm.gradle' version '5.1.0' apply false
    id 'com.github.davidmc24.gradle.plugin.avro' version '1.3.0'

}

def sentryAuthToken = System.getenv("SENTRY_AUTH_TOKEN")
def isSentryEnabled = sentryAuthToken != null && !sentryAuthToken.empty

if (isSentryEnabled) {
    apply plugin: 'io.sentry.jvm.gradle'
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "https://packages.confluent.io/maven/"
    }
}

group = 'org.opencadc'
sourceCompatibility = 11
version = '1000'

war {
    archiveFileName = 'tap##' + project.version + '.war'
}

configurations {
    intTestCompile.extendsFrom testImplementation
    intTestRuntime.extendsFrom testRuntimeOnly
    implementation.exclude group: 'uk.ac.starlink'
}

dependencies {

    configurations.all {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'org.slf4j', module: 'slf4j-reload4j'
        exclude group: 'log4j', module: 'log4j'
    }

    implementation('org.opencadc:cadc-log:[1.2.1,)') {
        exclude group: 'log4j', module: 'log4j'
    }

    implementation 'org.opencadc:cadc-access-control-identity:[1.0.7,)'
    implementation 'org.opencadc:cadc-adql:[1.1.16,)'
    implementation 'org.opencadc:cadc-dali-pg:0.3.1'
    implementation 'org.opencadc:cadc-dali:[1.2.24,)'
    implementation 'org.opencadc:cadc-log:[1.2.1,)'
    implementation 'org.opencadc:cadc-gms:[1.0.14,2.0)'

    implementation 'org.opencadc:cadc-rest:[1.4.3,)'
    implementation 'org.opencadc:cadc-tap-schema:[1.2.6,)'
    implementation 'org.opencadc:cadc-tap:[1.1.19,)'
    implementation 'org.opencadc:cadc-tap-server:[1.1.30,)'
    implementation 'org.opencadc:cadc-tap-server-pg:1.1.0'
    implementation 'org.opencadc:cadc-tap-server-oracle:1.2.11'
    implementation 'org.opencadc:cadc-util:[1.11.2,)'
    implementation 'org.opencadc:cadc-uws:[1.0.5,)'
    implementation 'org.opencadc:cadc-uws-server:[1.2.21,)'
    implementation 'org.opencadc:cadc-vosi:[1.4.6,)'

    implementation 'uk.ac.starlink:stil:[4.0,5.0)'
    implementation 'uk.ac.starlink:jcdf:[1.2.3,2.0)'
    implementation 'uk.ac.starlink:stil:[4.0,5.0)'

    // Switch out this to use any supported database instead of PostgreSQL.
    // ## START CUSTOM DATABASE ##
    implementation group: 'com.mysql', name: 'mysql-connector-j', version: '8.4.0'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
    // ## END CUSTOM DATABASE ##

    // JUnit 4
    testImplementation 'junit:junit:4.13.2'
    
    // Mockito core
    testImplementation 'org.mockito:mockito-core:4.11.0'
    testImplementation 'org.mockito:mockito-inline:4.11.0'
    
    // TestContainers core
    testImplementation 'org.testcontainers:testcontainers:1.18.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.18.3'
    
    // TestContainers Kafka specifically
    testImplementation 'org.testcontainers:kafka:1.18.3'
        
    testImplementation 'xmlunit:xmlunit:[1.0,)'

    implementation 'com.google.cloud:google-cloud-storage:2.22.2'
    implementation 'software.amazon.awssdk:s3:2.17.230'
    implementation 'software.amazon.awssdk:auth:2.17.230'
    implementation 'org.apache.solr:solr-s3-repository:8.11.2'

    // runtimeOnly 'org.opencadc:cadc-registry:[1.2.1,)'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    // https://mvnrepository.com/artifact/org.antlr/ST4
    implementation 'org.antlr:ST4:4.3.1'
    implementation 'io.sentry:sentry:7.1.0'
    implementation 'io.sentry:sentry-log4j2:7.1.0'

    // Kafka and Schema Registry dependencies
    implementation 'org.apache.kafka:kafka-clients:3.4.0'
    implementation 'io.confluent:kafka-schema-registry-client:7.3.3'
    implementation 'io.confluent:kafka-avro-serializer:7.3.3'
    implementation 'org.apache.avro:avro:1.11.1'

    // JSON processing
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-avro:2.13.4'

    // Spring for dependency injection (optional but recommended)
    implementation 'org.springframework:spring-context:5.3.23'
    implementation 'org.springframework:spring-web:5.3.23'

    // CSV writer 
    implementation 'net.sourceforge.javacsv:javacsv:2.0'



}

avro {
    fieldVisibility = "PRIVATE"
    stringType = "String"
}

sourceSets {
    intTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/intTest/java')
        }

        // set the intTest resource directory
        resources.srcDir file('src/intTest/resources')
    }
}

	tasks.withType(Test) {
    // reset the report destinations so that intTests go to their
    // own page
    //reports.html.destination = file("${reporting.baseDir}/${name}")
    reports.html.destination = file(reporting.baseDir.getAbsolutePath() + '/' + name)

    // Assign all Java system properties from
    // the command line to the tests
    systemProperties System.properties as Map<String, ?>
}

task intTest(type: Test) {
    // set the configuration context
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath

    // run the tests always
    outputs.upToDateWhen { false }
}

if (isSentryEnabled) {
    sentry {
        includeSourceContext = true
        org = "rubin-observatory"
        projectName = "tap"
        authToken = sentryAuthToken
        
        autoInstallation {
            enabled = true
        }
    }
}

